1. read 1.1 CI in mlops
2. read app.py file k comments
3. create github repo --> 07-learning-mlops-ci-demo
4. git init
5. add github remote 
6. abb hum apni ci pipeline likhenge ... and phir code + pipeline dono ko github p push kr denge ... 

7. for ci pipeline create new folder --> .github 
8. ci implement krne k liye hum github actions ... tool use krenge ... 
   other tools b h like genkins etc ... 

9. .github --> workflows (new folder)
   and iss workflows m hum chahe toh ek ya multiple pipelines bna skte h ... 

10. workflows --> ci.yaml (new file)

11. abb iss ci.yaml m hmara main kaam shuru hota h ... 
    yha p hum saari cheeje btayenge jo uss ... runner p chalega ... 
    as hum jaise hi apne code ko push/merge kr rhe h hote h toh ... toh pura ka pura code ... 
    copy ho jata h ek nye server p ... jisko hum runner bulate h ... toh uss runner p kya kya hona chahiye ... 
    kya kya series of events hone chahiye ... vo hum yha p btayenge ... 
    so this file is a kind of guideline ... uss runner ko chalane k liye ... 

12. a simple ci file diagram ... 
    a. ci m hum apne ci workflow ka naam btate h 
    b. phir hum btate h ki vo workflow trigger kb hoga (push hoga, ya merge p hoga, pull request p trigger hoga ... alag alag triggers ho skte h)
    c. kya jobs aap execute krna chahte ho uss runner k upper ... 
    toh aapko sabse pehle ... apni ci file m ye 3 cheeje btani h ...
13. go to ci.yaml file and code likho vha ... 

    name: ci

    on: push

    jobs:
    linting:
        runs-on: ubuntu-latest

        steps:
        - name: code checkout
            uses: actions/checkout@v3 #isse github ka repo aisetise copy paste ho jayega ... server/runner k upper
        
        - name: setup python 
            uses: actions/setup-python@v2 
            with:
            python-version: '3.9' 

        - name: install flake8 
            run: |
            python -m pip install --upgrade pip 
            pip install flake8 

        - name: run flake8 
            run: |
            flake8 app1.py       




    name: ci ... mere workflow ka naam h 
    on: push ... so, jaise hi meri main/kisi b branch m jaise hi koi push krega ... toh ye workflow trigger ho jayega 
    jobs: 
    aap ek job b execute kr skte ho and aap chaho toh multiple jobs b execute kr skte ho ... and ye saare jobs parallely execute honge ... 
    and har job alag runner p execute hoti h ... filhal mere pass ek hi job h i.e. linting krenge hum ... 
    a. so, sabse pehle hum job ka name btayenge ... 
        a.1) aapka job jo h ... vo uss particular runner p ... konse os p run krega ... 
        a.2) uss job ko execute krne k liye kya kya steps lgenge ... 

    jobs:
        linting:
            runs-on: ubuntu-latest (most of the servers ... ubuntu based servers hote h)

            steps: (isme aapko saare k saare steps ek ek krke btane hote h)
                -name: code checkout (step ka name h ye ... har step k liye ek name dena padhta h ... so, iss step m hum apne runner/server p code copy paste kr denge)
                -name: setup python 
                -name: install flake8 (as iski help se hi m linting krne wala hu)
                -name: run flake8 

                (note: yha p humne steps k name btaye h ... and unke ander kya kya h vo abb hum btayenge ... see ci.yaml file)
                
                abb mera ci pipeline ready h 

14. git status
15. git add .
16. git commit -m "inital commit"
17. git push origin master

18. so, code push hoti hi ... github p meri ci pipeline trigger honi chahiye ... 
19. kaise find kre ... github --> actions --> 1 workflow run --> see its details 
20. vha p error show krega as hmare code likhne k tarike m error h ... and jisne b commit kiya hoga vo jake dekhega ... 

21. abb app.py ko thik se arrange krte h and phir se linting krke dekhte h ... 
    so, m app1.py m code thik se likh rha hu ... 
    also, 
    - name: run flake8 
        run: |
          flake8 app1.py    #yha app1.py kr dena ... 

    we get some error ... 
    app1.py:8:1: E305 expected 2 blank lines after class or function definition, found 1
    app1.py:11:24: W292 no newline at end of file 

    1. line 8 col 1 k baad ek new line add kro ... 
    2. line 11 and col24 k baad wk new line add kro ... 

22. so, job complete ho gyi h ... and green tick aa gya h uss commit k liye ... 


******************************************
#now let's understand ki ci.yaml file m humne jo likha vo kya h ? 
#google p padho yr iske bare m ya phir campusx k lecture se ... session 21 lecture ... 
1. name --- name of our workflow 
2. on --- push/pull request/schedule ... it specifies the events that trigger the workflow 
3. jobs --- kya kaam krana h ... and aap multiple jobs kra skte ho 
4. runs-on --- runner/server p konsa os chalega ... 
5. steps --- each step can run : 1. script file
                                 2. run shell cmd (like pip install python)
                                 3. predefined actions (like setup python, code copy)
       a) script/shell cmd :- run k through execute krenge
       b) actions :- uses k through execute krenge 

6. actions/checkout@v3 :- so aapko apna ci workflow execute krne k liye ... aapki repo ka code chahiye hota h ... 
   and since aap ye puri cheej ek nyi machine p run kr rhe hote ho ... toh aapko vo code lana padhta h ... 
   toh aapko yha vo code github k server se utha k apne ci runner/server p lana h ... so, uske liye hum iss predefined 
   action ka use kr rhe h  ... 
   github/actions ----> issse google kro and aapko saare actions dikh jayenge jo github walo n bnaye huae h 
   
   v3 means ... checkout ki repo ka filhal version 3 chal rha h 
   so, ye 2 kaam kregi ... fetch and checkout ... 

7. actions/setup-python@v2 :- pre-defined action h ye b ... isse python install hota h ... runner env m path variable set krta h ... dependecies ko 
   cache kr leta h ... taki baar baar use ho toh jaldi se task ho jaye ... 




**********************************************
so, abhi humne simple workflow bnaya ... abhi hmara workflow 1 runner p chal rha tha ... 
and vo runner 1 os p chal rha tha i.e. ubuntu ... 
what is mujhe makesure krna h ki mera code jo h vo orr os p b chale ... 
abb m ek sath apne code ko linux ... windows ... mac p chalaunga ... 

1. ci.yaml ... isme abb hum edit and all krenge ... 
2. hum ek job ki jagah multiple parallel job chalayenge ... 
   aapka ek job chalega linux p, ek mac os p, ek windows p 
3. yha let's write code ... 
    jobs:
        linting:
            runs-on: ${{matrix.os}}
                      #mera ci server automatically smjh jayega ki there are 3 possible combinations and vo har combination ko ek job manega ...
                      #and har job ko vo parallely execute krega ... 
                      #iss code k execution p 3 runners bnenge ... ek k upper ubuntu aayega ... ek k upper windows ... ek k upper macos ...
                      #and inn parallel jobs p aage ka saara kaam hoga ... 
            strategy:
                matrix:
                    os: [ubuntu-latest,windows-latest,macos-latest]  
                  (matrix k ander aap kya krte ho ki ... os bolke ek option create kr skte ho ... os ki jagah hum kuch b likh skte h ... )

4. git add --> commit --> push
   go to github --> actions --> select ur commit --> vha dekho 3 different jobs show ho rhi h ... 


5. now, abb m not only python 3.9 ... but python 3.10 k liye b ye sbb krna chahta hu ... 
6. matrix:
    os: [ubuntu-latest,windows-latest,macos-latest]  note:- os is a key and list m iski values h ... so it is key value pair 
    version: ['3.9','3.10']

    and python-versions: ${{matrix.version}}

    now ... abb hamre pass 6 jobs ho gyi ... as har os and har version ka combination ek job hoga ... 
    so, basically abb aap smjh pa rhe ho ... 
7. git add --> commit --> push
   github --> actions 

8. so, we get the idea ki hum alag alag jobs k combination kaise try out kr skte h ... 

9. strategy :- isme btayi jati h ki job ko kaise handle krna h  ... kyi type ki ho skti h 
   a. fail-fast :- maan lo kisi ek os m job fail ho gyi ... toh ye har ek os ko band kr dega ... 
   b. max-parallel :- yha upper saare parallely execute ho rhe the ... yha aap limit lga skte ho ... ki aapko kitne parallely krane h ... 
   c. matrix :- defines the combinations of parameters that the job could run with. 
      each combination results in a separate job. 

10. so, far hmara ci workflow sirf ek particular trigger p execute ho rha h ... i.e. push trigger p ... 
    so, let's see hum multiple triggers kaise set kr skte h ... 

11. on:
        push:      #isme hum ye make sure krenge ki sirf master branch p hi ye trigger execute ho ... kisi or p na ho 
            branches:
                - master
        pull_request:       #jbb b pull request aayegi toh ye workflow apne aap chalne lgega ... 

12. git add --> commit

13. now, abb m ek pull request create krunga ... 
    so, m ek branch cut krunga ... and app1.py code m multiply fn add krunga ... nyi branch m ... uss nyi branch me m push krke 
    pull_request generate krunga ...

14. git branch temp
15. git checkout temp
16. add code in app1.py
    def mul(a, b):
        return a * b      note:- 2 fn k beech 2 lines ka difference hona chahiye 
                                 fn and aane wali new line m 2 lines ka difference hona chahiye ... 

17. git add .
18. git commit -m "add mul fn"
19. git push origin temp        #iss branch m reh k hi hum push kr rhe h ... 

29. git push origin master 
30. github --> actions --> 2 jobs h yha p ... 